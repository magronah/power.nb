[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 power.nb authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/stub.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Simulation for microbiome power analysis","text":"Installation Install package GitHub using devtools:","code":"install.packages(\"devtools\") devtools::install_github(\"magronah/power.nb\")"},{"path":"/articles/stub.html","id":"overview","dir":"Articles","previous_headings":"Introduction","what":"Overview","title":"Simulation for microbiome power analysis","text":"package allows : Fit statistical models microbiome count data. Simulate realistic count datasets different effect sizes. Test differential abundance. Estimate power per taxon. Explore sample size effect size sensitivity.","code":""},{"path":"/articles/stub.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Simulation for microbiome power analysis","text":"Use microbiome data fit Gaussian mixture model:","code":""},{"path":[]},{"path":"/articles/stub.html","id":"data-preprocessing","dir":"Articles","previous_headings":"Model Fitting > 1. You have data","what":"Data preprocessing","title":"Simulation for microbiome power analysis","text":"Fit logmean abundance Estimate log fold change using deseq","code":"library(power.nb) fit <- filter()  fit$ fit$ library(power.nb) fit <- logmean_fit()"},{"path":[]},{"path":"/articles/stub.html","id":"simulating-data","dir":"Articles","previous_headings":"","what":"Simulating Data","title":"Simulation for microbiome power analysis","text":"","code":"sim <- simulate_data(fit,                      n_taxa = 1000,                      n_per_group = c(30, 30),                      fold_changes = c(1.5, 2, 4),                      nsim = 100)"},{"path":"/articles/stub.html","id":"estimating-power","dir":"Articles","previous_headings":"","what":"Estimating Power","title":"Simulation for microbiome power analysis","text":"Calculate power taxon proportion significant detections:","code":""},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Agronah. Author, maintainer. Ben Bolker. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Agronah M, Bolker B (2025). power.nb: Power Sample Size Calculation Differential Abundance Microbiome Studies. R package version 0.0.0.9000.","code":"@Manual{,   title = {power.nb: Power and Sample Size Calculation for Differential Abundance Microbiome Studies},   author = {Michael Agronah and Ben Bolker},   year = {2025},   note = {R package version 0.0.0.9000}, }"},{"path":[]},{"path":"/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Power and Sample Size Calculation for Differential Abundance Microbiome Studies","text":"power.nb R package following features power.nb two simulators simulating microbiome data framework statistical power sample size calculation differential abundance microbiome studies","code":""},{"path":[]},{"path":"/reference/contour_plot_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Contour plot for showing predicted power — contour_plot_fun","title":"Contour plot for showing predicted power — contour_plot_fun","text":"Contour plot showing predicted power","code":""},{"path":"/reference/contour_plot_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Contour plot for showing predicted power — contour_plot_fun","text":"","code":"contour_plot_fun(combined_data, power_estimate, cont_breaks)"},{"path":"/reference/contour_plot_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Contour plot for showing predicted power — contour_plot_fun","text":"combined_data data used fitting gam power_estimate predicted power cont_breaks breaks contour plot","code":""},{"path":"/reference/contour_plot_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Contour plot for showing predicted power — contour_plot_fun","text":"ggplot2 object","code":""},{"path":"/reference/countdata_sim_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Count Data for Microbiome Studies — countdata_sim_fun","title":"Simulate Count Data for Microbiome Studies — countdata_sim_fun","text":"function simulates count data microbiome studies based log mean, log fold change, dispersion parameters. supports generating data multiple simulations allows flexibility specifying number control treatment samples samples per group.","code":""},{"path":"/reference/countdata_sim_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Count Data for Microbiome Studies — countdata_sim_fun","text":"","code":"countdata_sim_fun(   logmean_param,   logfoldchange_param,   dispersion_param,   nsamp_per_group = NULL,   ncont = NULL,   ntreat = NULL,   notu,   nsim = 1,   disp_scale = 0.3,   max_lfc = 15,   maxlfc_iter = 1000,   seed = NULL )"},{"path":"/reference/countdata_sim_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Count Data for Microbiome Studies — countdata_sim_fun","text":"logmean_param list parameters simulating log mean abundance. logfoldchange_param list parameters simulating log fold change, containing: par: Optimal parameters log fold change fitting. np: Number components log fold change model. sd_ord: Order polynomial standard deviation parameter. dispersion_param list dispersion parameters containing: asymptDisp: Asymptotic dispersion parameter. extraPois: Additional Poisson variation parameter. nsamp_per_group Number samples per group (control treatment). provided, ncont ntreat must specified. ncont Number control samples. Specify along ntreat nsamp_per_group provided. ntreat Number treatment samples. Specify along ncont nsamp_per_group provided. notu Number operational taxonomic units (OTUs) simulate. nsim Number simulations run. Default 1. disp_scale Scale parameter dispersion. Default 0.3. max_lfc Maximum allowable log fold change. Default 15. maxlfc_iter Maximum number iterations ensuring log fold change within max_lfc. Default 1,000. seed Seed value reproducibility. Default NULL.","code":""},{"path":"/reference/countdata_sim_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Count Data for Microbiome Studies — countdata_sim_fun","text":"list containing: countdata_list: list count data matrices simulation. metadata_list: list metadata data frames simulation. logmean_list: list log mean vectors simulation. logfoldchange_list: list log fold change vectors simulation. treat_countdata_list: list treatment count data matrices simulation. control_countdata_list: list control count data matrices simulation.","code":""},{"path":"/reference/countdata_sim_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Count Data for Microbiome Studies — countdata_sim_fun","text":"","code":"# Load required packages library(foreach) library(doParallel) #> Loading required package: iterators #> Loading required package: parallel # Define parameters logmean_param <- list(mu = 0, sigma = 1) logfoldchange_param <- list(par = rnorm(11), np = 2, sd_ord = 2) dispersion_param <- list(asymptDisp = 0.1, extraPois = 0.05)  # Simulate count data result <- countdata_sim_fun(   logmean_param = logmean_param,   logfoldchange_param = logfoldchange_param,   dispersion_param = dispersion_param,   nsamp_per_group = 10,   notu = 50,   nsim = 2,   seed = 123 ) #>  #> Attaching package: ‘purrr’ #> The following objects are masked from ‘package:foreach’: #>  #>     accumulate, when #> mixtools package, version 2.0.0.1, Released 2022-12-04 #> This package is based upon work supported by the National Science Foundation under Grant No. SES-0518772 and the Chan Zuckerberg Initiative: Essential Open Source Software for Science (Grant No. 2020-255193).  # Access simulation results countdata <- result$countdata_list[[1]] metadata <- result$metadata_list[[1]]"},{"path":"/reference/deseq_fun_est.html","id":null,"dir":"Reference","previous_headings":"","what":"Fold change and p-value estimations for a many simulations — deseq_fun_est","title":"Fold change and p-value estimations for a many simulations — deseq_fun_est","text":"Fold change p-value estimations many simulations","code":""},{"path":"/reference/deseq_fun_est.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fold change and p-value estimations for a many simulations — deseq_fun_est","text":"","code":"deseq_fun_est(   metadata_list,   countdata_list,   num_cores = 2,   ref_name = \"control\" )"},{"path":"/reference/deseq_fun_est.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fold change and p-value estimations for a many simulations — deseq_fun_est","text":"metadata_list : list metadata countdata_list : list otu count data num_cores : number cores ref_name reference fold change calculation","code":""},{"path":"/reference/deseq_fun_est.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fold change and p-value estimations for a many simulations — deseq_fun_est","text":"list logfoldchange log fold change estimates logmean  log mean count taxa (arithmetic mean taxa across subjects) dispersion: dispersion estimates taxa deseq_estimate  dataframe containing results deseq baseMean,log2FoldChange, lfcSE, pvalue, padj normalised_count normalised count data","code":""},{"path":"/reference/deseqfun.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate log fold changes using DESeq2. — deseqfun","title":"Estimate log fold changes using DESeq2. — deseqfun","text":"function estimates log fold changes (LFC) microbiome count data using DESeq2 package. strongly recommended keep following defaults: minReplicatesForReplace=Inf cooksCutoff=TRUE independentFiltering=TRUE options particularly useful estimating fold changes fit mixture Gaussian distributions.","code":""},{"path":"/reference/deseqfun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate log fold changes using DESeq2. — deseqfun","text":"","code":"deseqfun(   countdata,   metadata,   alpha_level = 0.1,   ref_name = \"NT\",   minReplicatesForReplace = Inf,   cooksCutoff = TRUE,   independentFiltering = TRUE,   shrinkage_method = \"normal\" )"},{"path":"/reference/deseqfun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate log fold changes using DESeq2. — deseqfun","text":"countdata matrix OTU count data rows represent taxa columns represent samples. metadata dataframe containing sample information two rows: one sample names one group names. alpha_level significance level determining differential expression. Default 0.1. ref_name reference group calculating fold changes. Default \"NT\" (Non-Treatment). minReplicatesForReplace DESeq2's parameter control minimum number replicates required replacing outliers dispersion estimation. Default Inf (replacement). cooksCutoff DESeq2's parameter removing outliers based Cook's distance. Default TRUE (outlier removal enabled). independentFiltering DESeq2's parameter independent filtering. Default TRUE. shrinkage_method DESeq2's shrinkage method fold changes. Default \"normal\". options include \"apeglm\" \"ashr\".","code":""},{"path":"/reference/deseqfun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate log fold changes using DESeq2. — deseqfun","text":"list containing following elements: logfoldchange: vector log fold change estimates taxa. logmean: vector log mean counts taxa (arithmetic mean taxa across subjects). dispersion: vector dispersion estimates taxa. deseq_estimate: dataframe containing DESeq2 results, including baseMean, log2FoldChange, lfcSE, pvalue, padj. normalised_count: matrix normalized count data.","code":""},{"path":"/reference/deseqfun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate log fold changes using DESeq2. — deseqfun","text":"","code":"# Example usage set.seed(101) countdata <- matrix(rpois(500, 3), ncol = 10, nrow = 50) # Simulated OTU count data with 50 taxa and 10 samples  metadata <- data.frame(Samples = paste(\"Sample\", 1:10, sep = \"_\"),              Groups = rep(c(\"Control\", \"Treatment\"), each = 5))  result <- deseqfun(countdata, metadata, ref = \"Control\",                     minReplicatesForReplace = Inf,                     cooksCutoff = TRUE,                     independentFiltering = TRUE,                     shrinkage_method=\"normal\") #> Warning: some variables in design formula are characters, converting to factors #> estimating size factors #> estimating dispersions #> gene-wise dispersion estimates #> mean-dispersion relationship #> -- note: fitType='parametric', but the dispersion trend was not well captured by the #>    function: y = a/x + b, and a local regression fit was automatically substituted. #>    specify fitType='local' or 'mean' to avoid this message next time. #> final dispersion estimates #> fitting model and testing #> using 'normal' for LFC shrinkage, the Normal prior from Love et al (2014). #>  #> Note that type='apeglm' and type='ashr' have shown to have less bias than type='normal'. #> See ?lfcShrink for more details on shrinkage type, and the DESeq2 vignette. #> Reference: https://doi.org/10.1093/bioinformatics/bty895  # Examine the results result$logfoldchange  # Log fold changes #>             1             2             3             4             5  #>  0.3339090170  0.2253236025 -0.0005933137 -0.1843735100 -0.1255381853  #>             6             7             8             9            10  #>  0.3260360309  0.2662700550  0.4130852292 -0.3206008745 -0.6873778125  #>            11            12            13            14            15  #> -0.1482795850  0.0399444626 -0.1053715590 -0.8513597892  0.1884642180  #>            16            17            18            19            20  #> -0.0939137355  0.0648612138 -0.0524837436  0.2331183726  0.2002225286  #>            21            22            23            24            25  #> -0.0906916473 -0.1706879180  0.2925166555 -0.2527453219 -0.1771413908  #>            26            27            28            29            30  #>  0.2080732095  0.1834234947  0.3287896565 -0.1506897803 -0.2962807987  #>            31            32            33            34            35  #> -0.0554646001 -0.0251289004  0.0878016941 -0.4457953672  0.0543080059  #>            36            37            38            39            40  #> -0.1157910161  0.2860733316 -0.2126669647  0.0653295587 -0.0300641780  #>            41            42            43            44            45  #> -0.0168842378  0.3591876131 -0.2467084583  0.5520742778  0.2856223493  #>            46            47            48            49            50  #>  0.5655522272  0.2755227002 -0.2255295480  0.1173856701  0.0834516448  result$logmean  # Log mean counts #>  [1] 1.1699952 1.1008437 1.5648823 1.8649487 1.6574919 1.4441289 1.9398546 #>  [8] 1.5793166 1.4985893 1.5116602 1.7389496 1.7918742 1.7288074 1.6672058 #> [15] 1.7058685 2.2726616 1.5709069 1.5000965 1.8180668 1.3944414 1.3185323 #> [22] 1.9889538 1.6072813 1.6752933 1.8983997 2.0579086 1.6960218 1.6497071 #> [29] 1.8068881 1.5988157 1.7337596 1.3651230 1.2928894 0.9772593 1.0662845 #> [36] 1.7378607 1.4382001 1.4507031 1.3294416 1.5843426 1.6937271 1.9556892 #> [43] 1.5831390 1.4224970 1.6989904 1.9143958 1.5205538 1.5174422 1.3168242 #> [50] 1.0704218 result$dispersion  # Dispersion estimates #>  [1] 0.29422668 0.35596809 0.22224901 0.08919115 0.14633570 0.19113967 #>  [7] 0.12612930 0.20578552 0.20109054 0.22303196 0.10296352 0.07896076 #> [13] 0.09189265 0.13151845 0.11852765 0.14343710 0.26550316 0.20842449 #> [19] 0.08407795 0.27467429 0.26774900 0.13243959 0.22003930 0.11210174 #> [25] 0.11867270 0.15119998 0.14821485 0.13206263 0.07466684 0.20047737 #> [31] 0.08773947 0.22536629 0.23493255 0.39457174 0.41742921 0.10294459 #> [37] 0.18327121 0.24517888 0.32330137 0.28272469 0.11004962 0.16118633 #> [43] 0.20945615 0.21754407 0.12209123 0.10953737 0.20834586 0.26940872 #> [49] 0.27811428 0.32286093 result$deseq_estimate  # DESeq2 results #>    baseMean log2FoldChange     lfcSE         stat     pvalue      padj #> 1  2.250110   0.3339090170 0.3179624  1.049409094 0.29398987 0.9677168 #> 2  2.144801   0.2253236025 0.3150063  0.711569674 0.47673129 0.9677168 #> 3  2.958534  -0.0005933137 0.3238370 -0.001838377 0.99853319 0.9985332 #> 4  3.642550  -0.1843735100 0.3199818 -0.574892096 0.56536428 0.9677168 #> 5  3.154676  -0.1255381853 0.3241237 -0.387910713 0.69808211 0.9677168 #> 6  2.720985   0.3260360309 0.3239493  0.998825173 0.31787939 0.9677168 #> 7  3.836670   0.2662700550 0.3219357  0.828231114 0.40753963 0.9677168 #> 8  2.988283   0.4130852292 0.3240721  1.264888324 0.20591136 0.9677168 #> 9  2.825663  -0.3206008745 0.3239523 -0.981777474 0.32620949 0.9677168 #> 10 2.851380  -0.6873778125 0.3230650 -2.073543309 0.03812174 0.9530436 #> 11 3.337920  -0.1482795850 0.3221844 -0.459306807 0.64601386 0.9677168 #> 12 3.462644   0.0399444626 0.3206076  0.124817623 0.90066794 0.9774095 #> 13 3.314537  -0.1053715590 0.3219628 -0.327405278 0.74336137 0.9677168 #> 14 3.175989  -0.8513597892 0.3242799 -2.514121160 0.01193294 0.5966472 #> 15 3.262253   0.1884642180 0.3230944  0.582253424 0.56039599 0.9677168 #> 16 4.832138  -0.0939137355 0.3187529 -0.293811976 0.76890158 0.9677168 #> 17 2.970914   0.0648612138 0.3229735  0.201690739 0.84015850 0.9677168 #> 18 2.828616  -0.0524837436 0.3238281 -0.162458130 0.87094510 0.9677168 #> 19 3.526084   0.2331183726 0.3209332  0.727104576 0.46716190 0.9677168 #> 20 2.628868   0.2002225286 0.3217352  0.618961754 0.53594155 0.9677168 #> 21 2.494122  -0.0906916473 0.3214324 -0.280610185 0.77900940 0.9677168 #> 22 3.969490  -0.1706879180 0.3211771 -0.529484996 0.59646905 0.9677168 #> 23 3.046771   0.2925166555 0.3238824  0.905383388 0.36526231 0.9677168 #> 24 3.193843  -0.2527453219 0.3232793 -0.779809137 0.43550323 0.9677168 #> 25 3.727994  -0.1771413908 0.3217066 -0.550682542 0.58185131 0.9677168 #> 26 4.163823   0.2080732095 0.3217254  0.645687957 0.51848146 0.9677168 #> 27 3.240063   0.1834234947 0.3241084  0.568137485 0.56994162 0.9677168 #> 28 3.137699   0.3287896565 0.3238194  1.008993782 0.31297762 0.9677168 #> 29 3.498868  -0.1506897803 0.3194484 -0.470439896 0.63804077 0.9677168 #> 30 3.028946  -0.2962807987 0.3242303 -0.908368521 0.36368355 0.9677168 #> 31 3.325934  -0.0554646001 0.3213303 -0.172403913 0.86312000 0.9677168 #> 32 2.575983  -0.0251289004 0.3230671 -0.077390263 0.93831309 0.9774095 #> 33 2.450183   0.0878016941 0.3221202  0.272016134 0.78560961 0.9677168 #> 34 1.968722  -0.4457953672 0.3108034 -1.405976214 0.15973119 0.9677168 #> 35 2.094034   0.0543080059 0.3115012  0.174507007 0.86146702 0.9677168 #> 36 3.335402  -0.1157910161 0.3224511 -0.359353790 0.71933044 0.9677168 #> 37 2.709826   0.2860733316 0.3239512  0.880634752 0.37851554 0.9677168 #> 38 2.733412  -0.2126669647 0.3226925 -0.659631111 0.50949058 0.9677168 #> 39 2.513054   0.0653295587 0.3191578  0.205047412 0.83753508 0.9677168 #> 40 2.998711  -0.0300641780 0.3225634 -0.093728420 0.92532489 0.9774095 #> 41 3.234913  -0.0168842378 0.3227955 -0.052251746 0.95832810 0.9778858 #> 42 3.879012   0.3591876131 0.3232130  1.109927604 0.26703022 0.9677168 #> 43 2.996210  -0.2467084583 0.3240736 -0.760048145 0.44722581 0.9677168 #> 44 2.680490   0.5520742778 0.3227623  1.688592715 0.09129751 0.9677168 #> 45 3.246737   0.2856223493 0.3232740  0.879530859 0.37911351 0.9677168 #> 46 3.769559   0.5655522272 0.3213410  1.736608723 0.08245626 0.9677168 #> 47 2.869012   0.2755227002 0.3239371  0.847127616 0.39692399 0.9677168 #> 48 2.862830  -0.2255295480 0.3224114 -0.702096242 0.48261915 0.9677168 #> 49 2.491171   0.1173856701 0.3204455  0.368518159 0.71248691 0.9677168 #> 50 2.100047   0.0834516448 0.3159507  0.264320742 0.79153278 0.9677168 result$normalised_count  # Normalized count data #>           [,1]      [,2]      [,3]      [,4]     [,5]     [,6]     [,7] #>  [1,] 2.197069 0.8649101 0.9646379 0.8503395 3.401358 2.344233 2.055038 #>  [2,] 0.000000 2.5947304 0.0000000 2.5510185 3.401358 3.516350 2.055038 #>  [3,] 4.394139 3.4596405 1.9292759 2.5510185 2.267572 2.344233 3.082556 #>  [4,] 4.394139 3.4596405 4.8231897 5.1020370 2.267572 5.860584 2.055038 #>  [5,] 2.197069 2.5947304 3.8585518 0.8503395 7.936502 2.344233 2.055038 #>  [6,] 2.197069 3.4596405 1.9292759 1.7006790 1.133786 3.516350 3.082556 #>  [7,] 3.295604 3.4596405 0.9646379 2.5510185 5.668930 7.032700 4.110075 #>  [8,] 2.197069 2.5947304 0.0000000 3.4013580 2.267572 4.688467 3.082556 #>  [9,] 3.295604 3.4596405 3.8585518 2.5510185 4.535144 1.172117 2.055038 #> [10,] 3.295604 2.5947304 7.7171035 4.2516975 3.401358 2.344233 1.027519 #> [11,] 5.492673 3.4596405 0.9646379 5.9523765 2.267572 2.344233 0.000000 #> [12,] 4.394139 3.4596405 0.0000000 3.4013580 5.668930 4.688467 5.137594 #> [13,] 4.394139 2.5947304 2.8939138 4.2516975 3.401358 3.516350 4.110075 #> [14,] 6.591208 6.9192809 4.8231897 2.5510185 3.401358 2.344233 2.055038 #> [15,] 3.295604 4.3245506 4.8231897 1.7006790 0.000000 3.516350 7.192632 #> [16,] 3.295604 3.4596405 6.7524656 8.5033950 3.401358 5.860584 4.110075 #> [17,] 5.492673 0.0000000 4.8231897 1.7006790 2.267572 1.172117 2.055038 #> [18,] 2.197069 1.7298202 2.8939138 4.2516975 3.401358 4.688467 1.027519 #> [19,] 2.197069 4.3245506 1.9292759 0.0000000 6.802716 5.860584 3.082556 #> [20,] 0.000000 5.1894607 2.8939138 2.5510185 0.000000 4.688467 4.110075 #> [21,] 4.394139 1.7298202 1.9292759 3.4013580 2.267572 0.000000 3.082556 #> [22,] 6.591208 5.1894607 0.9646379 5.9523765 3.401358 3.516350 2.055038 #> [23,] 2.197069 2.5947304 0.9646379 2.5510185 3.401358 7.032700 4.110075 #> [24,] 4.394139 4.3245506 2.8939138 3.4013580 3.401358 2.344233 3.082556 #> [25,] 6.591208 4.3245506 1.9292759 4.2516975 3.401358 8.204817 1.027519 #> [26,] 4.394139 1.7298202 3.8585518 6.8027160 1.133786 3.516350 5.137594 #> [27,] 1.098535 0.0000000 2.8939138 3.4013580 6.802716 7.032700 1.027519 #> [28,] 2.197069 1.7298202 2.8939138 4.2516975 1.133786 3.516350 4.110075 #> [29,] 2.197069 3.4596405 3.8585518 5.1020370 4.535144 2.344233 1.027519 #> [30,] 4.394139 5.1894607 0.9646379 3.4013580 4.535144 1.172117 4.110075 #> [31,] 3.295604 3.4596405 3.8585518 4.2516975 2.267572 1.172117 4.110075 #> [32,] 2.197069 3.4596405 1.9292759 3.4013580 2.267572 1.172117 4.110075 #> [33,] 1.098535 3.4596405 1.9292759 2.5510185 2.267572 2.344233 2.055038 #> [34,] 1.098535 6.0543708 1.9292759 1.7006790 3.401358 0.000000 2.055038 #> [35,] 3.295604 0.0000000 2.8939138 1.7006790 2.267572 1.172117 1.027519 #> [36,] 5.492673 5.1894607 2.8939138 0.0000000 4.535144 2.344233 1.027519 #> [37,] 2.197069 1.7298202 2.8939138 1.7006790 2.267572 3.516350 3.082556 #> [38,] 4.394139 2.5947304 5.7878277 0.8503395 2.267572 4.688467 4.110075 #> [39,] 0.000000 0.8649101 2.8939138 2.5510185 5.668930 4.688467 0.000000 #> [40,] 6.591208 0.0000000 3.8585518 1.7006790 3.401358 2.344233 0.000000 #> [41,] 3.295604 3.4596405 5.7878277 1.7006790 2.267572 2.344233 4.110075 #> [42,] 3.295604 4.3245506 1.9292759 0.0000000 5.668930 9.376934 6.165113 #> [43,] 4.394139 3.4596405 5.7878277 1.7006790 2.267572 4.688467 2.055038 #> [44,] 2.197069 0.8649101 1.9292759 1.7006790 1.133786 5.860584 1.027519 #> [45,] 2.197069 1.7298202 4.8231897 4.2516975 0.000000 2.344233 4.110075 #> [46,] 2.197069 4.3245506 0.9646379 1.7006790 3.401358 3.516350 6.165113 #> [47,] 1.098535 1.7298202 2.8939138 3.4013580 2.267572 2.344233 5.137594 #> [48,] 5.492673 1.7298202 3.8585518 4.2516975 1.133786 7.032700 1.027519 #> [49,] 4.394139 0.8649101 0.0000000 1.7006790 4.535144 2.344233 4.110075 #> [50,] 1.098535 0.8649101 2.8939138 2.5510185 2.267572 1.172117 4.110075 #>           [,8]      [,9]    [,10] #>  [1,] 5.134968 2.4209690 2.267572 #>  [2,] 1.026994 4.0349484 2.267572 #>  [3,] 3.080981 0.8069897 5.668930 #>  [4,] 1.026994 4.0349484 3.401358 #>  [5,] 3.080981 3.2279587 3.401358 #>  [6,] 3.080981 4.8419380 2.267572 #>  [7,] 5.134968 1.6139793 4.535144 #>  [8,] 3.080981 4.0349484 4.535144 #>  [9,] 1.026994 4.0349484 2.267572 #> [10,] 0.000000 1.6139793 2.267572 #> [11,] 5.134968 3.2279587 4.535144 #> [12,] 2.053987 2.4209690 3.401358 #> [13,] 1.026994 2.4209690 4.535144 #> [14,] 0.000000 0.8069897 2.267572 #> [15,] 3.080981 2.4209690 2.267572 #> [16,] 3.080981 6.4559174 3.401358 #> [17,] 4.107974 2.4209690 5.668930 #> [18,] 3.080981 1.6139793 3.401358 #> [19,] 4.107974 2.4209690 4.535144 #> [20,] 4.107974 1.6139793 1.133786 #> [21,] 1.026994 4.8419380 2.267572 #> [22,] 4.107974 5.6489277 2.267572 #> [23,] 3.080981 0.0000000 4.535144 #> [24,] 3.080981 1.6139793 3.401358 #> [25,] 2.053987 3.2279587 2.267572 #> [26,] 9.242943 2.4209690 3.401358 #> [27,] 2.053987 2.4209690 5.668930 #> [28,] 4.107974 4.0349484 3.401358 #> [29,] 6.161962 4.0349484 2.267572 #> [30,] 1.026994 3.2279587 2.267572 #> [31,] 3.080981 3.2279587 4.535144 #> [32,] 2.053987 4.0349484 1.133786 #> [33,] 4.107974 2.4209690 2.267572 #> [34,] 1.026994 2.4209690 0.000000 #> [35,] 6.161962 2.4209690 0.000000 #> [36,] 4.107974 3.2279587 4.535144 #> [37,] 3.080981 3.2279587 3.401358 #> [38,] 1.026994 1.6139793 0.000000 #> [39,] 1.026994 4.0349484 3.401358 #> [40,] 5.134968 2.4209690 4.535144 #> [41,] 3.080981 4.0349484 2.267572 #> [42,] 2.053987 4.8419380 1.133786 #> [43,] 2.053987 2.4209690 1.133786 #> [44,] 5.134968 2.4209690 4.535144 #> [45,] 7.188955 2.4209690 3.401358 #> [46,] 4.107974 5.6489277 5.668930 #> [47,] 2.053987 3.2279587 4.535144 #> [48,] 1.026994 0.8069897 2.267572 #> [49,] 3.080981 1.6139793 2.267572 #> [50,] 1.026994 1.6139793 3.401358"},{"path":"/reference/dispersion_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit the non-linear function to dispersion estimates — dispersion_fit","title":"Fit the non-linear function to dispersion estimates — dispersion_fit","text":"Dispersion estimated DESeq2 package. function fitted form  + b/(mean count) represents asymptotic dispersion level high abundance taxa, b captures additional dispersion variability.","code":""},{"path":"/reference/dispersion_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit the non-linear function to dispersion estimates — dispersion_fit","text":"","code":"dispersion_fit(dispersion, logmean)"},{"path":"/reference/dispersion_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit the non-linear function to dispersion estimates — dispersion_fit","text":"dispersion dispersion estimates deseq logmean vector log mean abundance","code":""},{"path":"/reference/dispersion_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit the non-linear function to dispersion estimates — dispersion_fit","text":"list containing estimates b confidence intervals","code":""},{"path":"/reference/dispersion_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit the non-linear function to dispersion estimates — dispersion_fit","text":"","code":"logmean    =  rnorm(100) dispersion =  abs(rnorm(100)) dispersion_fit(dispersion,logmean) #> Waiting for profiling to be done... #> $param #>   asymptDisp  extraPois #> 1   1.040542 -0.1548921 #>  #> $confint #>                  2.5%       97.5% #> asymptDisp  0.8318125  1.24927099 #> extraPois  -0.2877109 -0.02207319 #>"},{"path":"/reference/dispersion_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Dispersion for Microbiome Data — dispersion_fun","title":"Calculate Dispersion for Microbiome Data — dispersion_fun","text":"function calculates dispersion value microbiome data based provided parameters: mean abundance, asymptotic dispersion, extra Poisson dispersion.","code":""},{"path":"/reference/dispersion_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Dispersion for Microbiome Data — dispersion_fun","text":"","code":"dispersion_fun(mean_abund, asymptDisp, extraPois)"},{"path":"/reference/dispersion_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Dispersion for Microbiome Data — dispersion_fun","text":"mean_abund Numeric value representing mean abundance taxa. asymptDisp Numeric value asymptotic dispersion (dispersion high abundance). extraPois Numeric value extra Poisson dispersion (model overdispersion).","code":""},{"path":"/reference/dispersion_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Dispersion for Microbiome Data — dispersion_fun","text":"numeric value representing dispersion.","code":""},{"path":"/reference/dispersion_fun.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Dispersion for Microbiome Data — dispersion_fun","text":"dispersion calculated using formula: $$\\text{dispersion} = \\text{asymptDisp} + \\frac{\\text{extraPois}}{\\text{mean_abund}}$$","code":""},{"path":"/reference/dispersion_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Dispersion for Microbiome Data — dispersion_fun","text":"","code":"mean_abund <- 10 asymptDisp <- 0.1 extraPois <- 0.05 dispersion_fun(mean_abund, asymptDisp, extraPois) #> [1] 0.105"},{"path":"/reference/dnormmix.html","id":null,"dir":"Reference","previous_headings":"","what":"Density of a Normal Mixture Model — dnormmix","title":"Density of a Normal Mixture Model — dnormmix","text":"function calculates density normal mixture model given vector parameters unconstrained scale (softmax(prob), mean, log(sd)).","code":""},{"path":"/reference/dnormmix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Density of a Normal Mixture Model — dnormmix","text":"","code":"dnormmix(x, par, logmean, ..., log = FALSE)"},{"path":"/reference/dnormmix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Density of a Normal Mixture Model — dnormmix","text":"x Numeric vector values evaluate density. par vector parameters unconstrained scale, including: softmax(prob): Mixture probabilities (unconstrained scale, transformed via softmax). mean: Means normal components. log(sd): Logarithms standard deviations normal components. logmean Numeric value representing log mean parameter. ... Additional arguments passed genmixpars function. Defaults: two components (np = 2) quadratic model standard deviation parameters (sd_ord = 2). log Logical. TRUE, logarithm density returned. Default FALSE.","code":""},{"path":"/reference/dnormmix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Density of a Normal Mixture Model — dnormmix","text":"numeric vector density values (log-density values log = TRUE) mixture model.","code":""},{"path":"/reference/dnormmix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Density of a Normal Mixture Model — dnormmix","text":"","code":"# Example parameters x <- seq(-3, 3, length.out = 100) ## par <- c(-0.5, 0.5, log(0.8), log(1.2))  # Example: softmax probabilities, mean, log(sd) set.seed(101); par <- rnorm(11) logmean <- rep(0.1, length(x))  ## constant log mean  # Calculate density density <- dnormmix(x, par, logmean)  # Calculate log-density log_density <- dnormmix(x, par, logmean, log = TRUE)"},{"path":"/reference/dnormmix0.html","id":null,"dir":"Reference","previous_headings":"","what":"Density function for the mixture of Gaussian distributions — dnormmix0","title":"Density function for the mixture of Gaussian distributions — dnormmix0","text":"takes pars three vectors (prob, mean, sd), constrained scale","code":""},{"path":"/reference/dnormmix0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Density function for the mixture of Gaussian distributions — dnormmix0","text":"","code":"dnormmix0(x, probs, muvals, sdvals, log = FALSE)"},{"path":"/reference/dnormmix0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Density function for the mixture of Gaussian distributions — dnormmix0","text":"x vector probs mixture proportions muvals values mean sdvals values standard deviataions log log scale","code":""},{"path":"/reference/dnormmix0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Density function for the mixture of Gaussian distributions — dnormmix0","text":"likelihood","code":""},{"path":"/reference/filter_low_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter to remove low abundant taxa — filter_low_count","title":"Filter to remove low abundant taxa — filter_low_count","text":"Filter retain taxa least abund_thresh counts least sample_thresh samples","code":""},{"path":"/reference/filter_low_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter to remove low abundant taxa — filter_low_count","text":"","code":"filter_low_count(countdata, metadata, abund_thresh = 5, sample_thresh = 3)"},{"path":"/reference/filter_low_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter to remove low abundant taxa — filter_low_count","text":"countdata otu table metadata dataframe 2 rows sample names group names abund_thresh minimum number taxa abundance threshold sample_thresh minimum number sample threshold","code":""},{"path":"/reference/filter_low_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter to remove low abundant taxa — filter_low_count","text":"filtered otu count data","code":""},{"path":"/reference/gam_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — gam_fit","title":"Title — gam_fit","text":"Title","code":""},{"path":"/reference/gam_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — gam_fit","text":"","code":"gam_fit(   deseq_est_list,   true_lfoldchange_list,   true_lmean_list,   grid_len = 50,   alpha_level = 0.1 )"},{"path":"/reference/gam_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — gam_fit","text":"deseq_est_list list containing fold change, pvalues estimates DESeq2 true_lfoldchange_list list containing simulated log fold change used  simulating count data true_lmean_list list containing simulated log mean count used  simulating count data grid_len number grids alpha_level significance level power calculations","code":""},{"path":"/reference/gam_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — gam_fit","text":"list fit_2d fitted scam object power_estimate predicted power estimated using fit_2d combined_data tibble containing pvlaues used GAM fit","code":""},{"path":"/reference/gen_parnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Parameter Names for Mixture Model — gen_parnames","title":"Generate Parameter Names for Mixture Model — gen_parnames","text":"function generates parameter names Gaussian mixture model based number components (np) order polynomial function (sd_ord) used model standard deviation parameters.","code":""},{"path":"/reference/gen_parnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Parameter Names for Mixture Model — gen_parnames","text":"","code":"gen_parnames(np, sd_ord)"},{"path":"/reference/gen_parnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Parameter Names for Mixture Model — gen_parnames","text":"np Integer. number Gaussian components mixture model. sd_ord Integer. order polynomial function used model standard deviation parameters. Possible values : 1: Linear function. 2: Quadratic function.","code":""},{"path":"/reference/gen_parnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Parameter Names for Mixture Model — gen_parnames","text":"character vector parameter names, including: Logit-transformed probabilities (logitprob_1, ..., logitprob_(np-1)). Mean parameters (mu_int_1, mu_slope_1, ..., component). Log-transformed standard deviations (logsd_.1_1, logsd_.L_1, ..., depending sd_ord np).","code":""},{"path":"/reference/gen_parnames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Parameter Names for Mixture Model — gen_parnames","text":"","code":"# Generate parameter names for a 3-component mixture with linear standard deviation function gen_parnames(np = 3, sd_ord = 1) #>  [1] \"logitprob_1\" \"logitprob_2\" \"mu_int_1\"    \"mu_int_2\"    \"mu_int_3\"    #>  [6] \"mu_slope_1\"  \"mu_slope_2\"  \"mu_slope_3\"  \"logsd_.1_1\"  \"logsd_.1_2\"  #> [11] \"logsd_.1_3\"  \"logsd_.L_1\"  \"logsd_.L_2\"  \"logsd_.L_3\"   # Generate parameter names for a 4-component mixture with quadratic standard deviation function gen_parnames(np = 4, sd_ord = 2) #>  [1] \"logitprob_1\" \"logitprob_2\" \"logitprob_3\" \"mu_int_1\"    \"mu_int_2\"    #>  [6] \"mu_int_3\"    \"mu_int_4\"    \"mu_slope_1\"  \"mu_slope_2\"  \"mu_slope_3\"  #> [11] \"mu_slope_4\"  \"logsd_.1_1\"  \"logsd_.1_2\"  \"logsd_.1_3\"  \"logsd_.1_4\"  #> [16] \"logsd_.L_1\"  \"logsd_.L_2\"  \"logsd_.L_3\"  \"logsd_.L_4\"  \"logsd_.Q_1\"  #> [21] \"logsd_.Q_2\"  \"logsd_.Q_3\"  \"logsd_.Q_4\""},{"path":"/reference/genmixpars.html","id":null,"dir":"Reference","previous_headings":"","what":"generate normal mixture parameters (prob vector, mean vector, sd vector for a specified set of 'x' values (logmean) — genmixpars","title":"generate normal mixture parameters (prob vector, mean vector, sd vector for a specified set of 'x' values (logmean) — genmixpars","text":"generate normal mixture parameters (prob vector, mean vector, sd vector specified set 'x' values (logmean)","code":""},{"path":"/reference/genmixpars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate normal mixture parameters (prob vector, mean vector, sd vector for a specified set of 'x' values (logmean) — genmixpars","text":"","code":"genmixpars(x, pars, np = 2, sd_ord = 2)"},{"path":"/reference/genmixpars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate normal mixture parameters (prob vector, mean vector, sd vector for a specified set of 'x' values (logmean) — genmixpars","text":"x independent variable pars parameter vector: first logit-probs (np-1), mean parameters (2 per component: intercepts, slopes), var parameters (varord + 1 per component: intercepts, slopes, quad coeffs, etc.) np number components mixture sd_ord order logsd model (2 = quadratic)","code":""},{"path":"/reference/genmixpars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generate normal mixture parameters (prob vector, mean vector, sd vector for a specified set of 'x' values (logmean) — genmixpars","text":"list","code":"probs: mixture proportions ()   muvals: mean values   sdvals: standard deviation values"},{"path":"/reference/logfoldchange_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a mixture of Gaussian distributions to log fold change — logfoldchange_fit","title":"Fit a mixture of Gaussian distributions to log fold change — logfoldchange_fit","text":"standard deviation parameters modeled either linear quadratic functions log mean count mean parameter modeled linear functions log mean count","code":""},{"path":"/reference/logfoldchange_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a mixture of Gaussian distributions to log fold change — logfoldchange_fit","text":"","code":"logfoldchange_fit(   logmean,   logfoldchange,   ncore = 2,   max_sd_ord = 2,   max_np = 5,   minval = -5,   maxval = 5,   itermax = 100,   NP = 800,   seed = 100 )"},{"path":"/reference/logfoldchange_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a mixture of Gaussian distributions to log fold change — logfoldchange_fit","text":"logmean vector log mean abundance logfoldchange vector log fold change ncore number cores use max_sd_ord maximum order polynomial function fit standard deviation parameter. must either 1 (linear) 2(quadratic) max_np maximum number Gaussian components check minval minimum value DEoptim search maxval maximum value DEoptim search itermax maximum number iterations NP number population members DEoptim seed seed value","code":""},{"path":"/reference/logfoldchange_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a mixture of Gaussian distributions to log fold change — logfoldchange_fit","text":"list.","code":"par is a vector of the estimates of the mixture proportion,    the mean and standard deviation parameters,     np is the number of gaussian components fitted     sd_ord is the order for the function for the standard deviation     aic is the aic of the best fit"},{"path":"/reference/logfoldchange_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a mixture of Gaussian distributions to log fold change — logfoldchange_fit","text":"","code":"logmean        =  rnorm(100) logfoldchange  =  rnorm(100) logfoldchange_fit(logmean,logfoldchange) #> Error in get(name, envir = envir): object 'logmean' not found"},{"path":"/reference/logfoldchange_sim_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Log Fold Change Values — logfoldchange_sim_fun","title":"Simulate Log Fold Change Values — logfoldchange_sim_fun","text":"function generates simulated log fold change (LFC) values based provided log mean abundance LFC parameters. simulation ensures generated LFC values remain within specified maximum range iterating convergence maximum iteration limit reached.","code":""},{"path":"/reference/logfoldchange_sim_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Log Fold Change Values — logfoldchange_sim_fun","text":"","code":"logfoldchange_sim_fun(   logmean_sim,   logfoldchange_param,   max_lfc = 15,   max_iter = 10000 )"},{"path":"/reference/logfoldchange_sim_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Log Fold Change Values — logfoldchange_sim_fun","text":"logmean_sim numeric vector simulated log mean abundances. logfoldchange_param list containing parameters log fold change simulation: par: Optimal parameters log fold change fit. np: Optimal number components log fold change model. sd_ord: Order polynomial used standard deviation parameter log fold change. max_lfc numeric value specifying maximum allowable absolute log fold change value. Default 15. max_iter integer specifying maximum number iterations allowed ensure simulated LFC values within max_lfc range. Default 10,000.","code":""},{"path":"/reference/logfoldchange_sim_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Log Fold Change Values — logfoldchange_sim_fun","text":"numeric vector simulated log fold change values (lfc).","code":""},{"path":"/reference/logfoldchange_sim_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Log Fold Change Values — logfoldchange_sim_fun","text":"","code":"# Define simulated log mean abundance logmean_sim <- rnorm(100, mean = 0, sd = 1)  # Define parameters for log fold change simulation logfoldchange_param <- list(   par = c(1, -0.5, 0.2), # Example parameters   np = 2,                # Number of components   sd_ord = 2             # Order of polynomial for SD )  # Simulate log fold change values logfoldchange_sim_fun(   logmean_sim = logmean_sim,   logfoldchange_param = logfoldchange_param,   max_lfc = 10,   max_iter = 5000 ) #> Error in genmixpars(logmean, par, ...): number of pars (3) != expected (11) (np = 2, sd_ord = 2)"},{"path":"/reference/logmean_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a mixture of Gaussian Distributions to log mean count of taxa. — logmean_fit","title":"Fit a mixture of Gaussian Distributions to log mean count of taxa. — logmean_fit","text":"optimal number components fit chosen using parametric bootstrap method","code":""},{"path":"/reference/logmean_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a mixture of Gaussian Distributions to log mean count of taxa. — logmean_fit","text":"","code":"logmean_fit(logmean, sig = 0.05, max.comp = 4, max.boot = 100)"},{"path":"/reference/logmean_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a mixture of Gaussian Distributions to log mean count of taxa. — logmean_fit","text":"logmean vector log mean count taxa sig significance level compare p-value used parametric bootstrap calculation max.comp maximum number Gaussian components compare sequentially max.boot maximum number bootstraps simulations","code":""},{"path":"/reference/logmean_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a mixture of Gaussian Distributions to log mean count of taxa. — logmean_fit","text":"list containing optimal number Gaussian components fitted; mean variance parameter estimates fit","code":""},{"path":"/reference/logmean_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a mixture of Gaussian Distributions to log mean count of taxa. — logmean_fit","text":"","code":"logmean  = rnorm(100) logmean_fit(logmean,sig=0.05,max.comp=4,max.boot=100) #> number of iterations= 98  #> number of iterations= 4  #> number of iterations= 17  #> number of iterations= 20  #> number of iterations= 20  #> number of iterations= 16  #> number of iterations= 105  #> number of iterations= 14  #> number of iterations= 63  #> number of iterations= 12  #> number of iterations= 141  #> number of iterations= 87  #> number of iterations= 15  #> number of iterations= 14  #> number of iterations= 59  #> number of iterations= 50  #> number of iterations= 17  #> number of iterations= 58  #> number of iterations= 44  #> number of iterations= 19  #> number of iterations= 29  #> number of iterations= 75  #> number of iterations= 38  #> number of iterations= 16  #> number of iterations= 32  #> number of iterations= 274  #> number of iterations= 51  #> number of iterations= 85  #> number of iterations= 107  #> number of iterations= 47  #> number of iterations= 38  #> number of iterations= 73  #> number of iterations= 19  #> number of iterations= 47  #> number of iterations= 21  #> One of the variances is going to zero;  trying new starting values. #> One of the variances is going to zero;  trying new starting values. #> number of iterations= 27  #> number of iterations= 91  #> number of iterations= 15  #> number of iterations= 61  #> number of iterations= 140  #> number of iterations= 16  #> number of iterations= 18  #> number of iterations= 25  #> number of iterations= 43  #> number of iterations= 51  #> number of iterations= 18  #> number of iterations= 106  #> number of iterations= 93  #> number of iterations= 111  #> number of iterations= 17  #> number of iterations= 130  #> number of iterations= 97  #> number of iterations= 57  #> number of iterations= 37  #> number of iterations= 11  #> number of iterations= 71  #> number of iterations= 15  #> number of iterations= 29  #> number of iterations= 43  #> number of iterations= 110  #> number of iterations= 70  #> number of iterations= 22  #> number of iterations= 14  #> number of iterations= 104  #> number of iterations= 15  #> number of iterations= 8  #> number of iterations= 22  #> number of iterations= 34  #> number of iterations= 72  #> number of iterations= 13  #> number of iterations= 10  #> number of iterations= 84  #> number of iterations= 17  #> number of iterations= 19  #> number of iterations= 173  #> number of iterations= 64  #> number of iterations= 94  #> number of iterations= 3  #> number of iterations= 12  #> number of iterations= 9  #> number of iterations= 23  #> number of iterations= 34  #> number of iterations= 2  #> number of iterations= 11  #> number of iterations= 11  #> number of iterations= 39  #> number of iterations= 31  #> number of iterations= 47  #> number of iterations= 52  #> number of iterations= 46  #> number of iterations= 23  #> number of iterations= 27  #> number of iterations= 44  #> number of iterations= 42  #> number of iterations= 12  #> number of iterations= 9  #> number of iterations= 22  #> number of iterations= 13  #> number of iterations= 24  #> number of iterations= 7  #> number of iterations= 13   #> Decision: Select 1 Component(s)  #> $logmean_param #>       sigma           mu #> 1 0.7805682 -0.002446383 #>  #> $components #> [1] 1 #>"},{"path":"/reference/logmean_sim_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Log Means for OTUs — logmean_sim_fun","title":"Simulate Log Means for OTUs — logmean_sim_fun","text":"function generates log means specified number OTUs (Operational Taxonomic Units) based provided parameters. single mean specified, log means drawn normal distribution. multiple means corresponding weights specified, log means drawn mixture normal distributions.","code":""},{"path":"/reference/logmean_sim_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Log Means for OTUs — logmean_sim_fun","text":"","code":"logmean_sim_fun(logmean_param, notu)"},{"path":"/reference/logmean_sim_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Log Means for OTUs — logmean_sim_fun","text":"logmean_param list containing parameters distribution: mu: single value vector mean(s) normal mixture distribution. sigma: standard deviation(s) normal mixture distribution. lambda: (Optional) vector weights components mixture distribution. Required mu one value. notu integer specifying number OTUs simulate.","code":""},{"path":"/reference/logmean_sim_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Log Means for OTUs — logmean_sim_fun","text":"numeric vector simulated log means specified number OTUs.","code":""},{"path":"/reference/logmean_sim_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Log Means for OTUs — logmean_sim_fun","text":"","code":"# Example 1: Single normal distribution params_single <- list(mu = 0, sigma = 1) logmean_sim_fun(logmean_param = params_single, notu = 100) #>   [1]  1.5247663842 -0.5015504837  2.3992551103 -0.0959089860  0.0658688799 #>   [6] -2.0950705492  0.0981670854  1.7746868241 -0.0115041725  1.2632880269 #>  [11] -0.9321132804 -0.2760755436 -0.4886184524  0.4711262332  1.4441135506 #>  [16]  0.1991474290  0.8888998756  0.5532362418  1.2451872751  0.2936839672 #>  [21] -0.7746829596  0.0266178681 -2.4446884116 -1.6230134410 -0.5463497414 #>  [26]  0.4292152775  1.3620103995 -0.9161524195  0.0359557023  0.9865549323 #>  [31] -1.0184345010  0.3973988722 -0.7131125048  1.3450399517  0.2042207959 #>  [36]  0.2619146139 -0.4147417530 -1.3658556585  0.8185952324 -0.3744949175 #>  [41]  0.3850703591 -1.3585343837 -0.4399398950 -0.8149376733  0.4604441468 #>  [46]  0.7632444146 -1.1145291638 -1.0696257271  0.1269307895  0.4773923798 #>  [51] -1.0904656577  0.1217674695 -0.5755452000 -0.1922327562  0.1152379157 #>  [56] -0.3157208618 -0.4386662687 -2.3279713000 -0.2114882804  0.2681199832 #>  [61] -0.7841378517 -0.0821148655 -0.1634936795  1.2592703625 -0.6587060791 #>  [66] -1.0064437262 -0.1209984078 -1.3317281620 -0.4359405831 -0.5295206910 #>  [71]  0.1116011738 -0.0868561787 -0.0183377960 -0.4001851323 -0.3694184639 #>  [76] -0.6056917488  1.1312555755  0.0126410777 -0.9858803835 -1.5539200460 #>  [81] -0.4449745407 -0.1227002719 -1.3042977144  0.2100949530  0.4276912705 #>  [86] -1.9329924876  1.7888001957 -0.6517847182 -0.5517179091 -0.9803206663 #>  [91]  0.0003794807 -1.0683507606  0.5574898852 -0.3847882409 -0.0070969234 #>  [96]  0.2714161280 -2.6420007953  0.7687061725 -0.7280291431  0.3757777864  # Example 2: Mixture of normal distributions params_mixture <- list(   mu = c(-1, 1),   sigma = c(0.5, 0.5),   lambda = c(0.4, 0.6) ) logmean_sim_fun(logmean_param = params_mixture, notu = 100) #>   [1]  1.56591704 -0.98225754  0.73269740  0.87169065  0.63369889  1.48679932 #>   [7]  0.54666608 -1.77808273  1.05408075  1.79153571 -0.64395258  0.85937891 #>  [13]  0.53655529  0.79936222  1.38466041  2.06674154  1.53836512 -1.18286764 #>  [19] -1.61442787  1.19130144  1.25086879  1.50996717  1.22997832 -1.65620021 #>  [25]  0.69130996  0.98802219 -0.77512694 -0.90593007  0.96806365  1.13691199 #>  [31] -1.52727607 -0.33999805 -0.18342352 -1.06050366  1.58473637  0.85076233 #>  [37]  0.59930665  1.48410550 -0.90205090 -0.82344824 -1.36521417  0.26615325 #>  [43] -2.01957072 -0.67336171  0.78729513 -0.21265087  0.71397519 -0.63299620 #>  [49] -1.21577930  1.22395373  1.73468251 -1.10072651  0.99800221  1.16716005 #>  [55]  0.23937903  1.27286472 -0.90483671 -1.32780111 -0.76567792 -0.62825527 #>  [61] -0.82263237  0.35566213 -0.53217074 -1.32932260  0.02934445 -1.75256592 #>  [67]  1.31431309  0.91541259 -0.59540105  0.58430402  0.83701292  0.76869045 #>  [73]  0.14208251 -1.09868024 -1.98729776  1.12268931  1.69772954  0.32285210 #>  [79]  0.86736651  0.16938958  0.92443795  1.47071591 -1.04255570 -1.18029205 #>  [85]  0.96980481  1.24551520  1.04111993 -1.11237839 -1.82478100  0.70843251 #>  [91]  1.99898626 -1.34714664  0.96844293  1.80302076 -1.37876407  0.17269305 #>  [97] -0.94859062  0.82024234  1.40800594  0.96951857"},{"path":"/reference/myrnormmix.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulating from a mixture of Gaussian — myrnormmix","title":"Simulating from a mixture of Gaussian — myrnormmix","text":"Simulating mixture Gaussian","code":""},{"path":"/reference/myrnormmix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulating from a mixture of Gaussian — myrnormmix","text":"","code":"myrnormmix(par, logmean, ...)"},{"path":"/reference/myrnormmix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulating from a mixture of Gaussian — myrnormmix","text":"par parameters (mean, standard deviation mixture proportion mixture Gaussian) logmean log mean count taxa ... parameters taken genmixpars","code":""},{"path":"/reference/myrnormmix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulating from a mixture of Gaussian — myrnormmix","text":"random values  mixture Gaussian","code":""},{"path":"/reference/nllfun.html","id":null,"dir":"Reference","previous_headings":"","what":"Objective function — nllfun","title":"Objective function — nllfun","text":"Objective function","code":""},{"path":"/reference/nllfun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Objective function — nllfun","text":"","code":"nllfun(par, vals, logmean, np, sd_ord)"},{"path":"/reference/nllfun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Objective function — nllfun","text":"par parameters mixture Gaussian vals values log fold change logmean log mean count np number Gaussian components sd_ord order polynomial function model standard deviation parameters (1 - linear function 2- quad)","code":""},{"path":"/reference/nllfun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Objective function — nllfun","text":"value objective function","code":""},{"path":"/reference/optimal.comp.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the optimal number of gaussian components for log mean count — optimal.comp","title":"Computes the optimal number of gaussian components for log mean count — optimal.comp","text":"number gaussian components determined using using parametric bootstrap","code":""},{"path":"/reference/optimal.comp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the optimal number of gaussian components for log mean count — optimal.comp","text":"","code":"optimal.comp(logmean, sig = 0.05, max.comp = 4, max.boot = 100)"},{"path":"/reference/optimal.comp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the optimal number of gaussian components for log mean count — optimal.comp","text":"logmean vector log mean abundances taxa sig significance level compare p-value max.comp maximum number Gaussian components compare sequentially max.boot maximum number bootstraps simulations","code":""},{"path":"/reference/optimal.comp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes the optimal number of gaussian components for log mean count — optimal.comp","text":"best number components fitting distribution log mean abundance","code":""},{"path":"/reference/optimal.comp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes the optimal number of gaussian components for log mean count — optimal.comp","text":"","code":"logmean  = rnorm(100) optimal.comp(logmean,sig=0.05,max.comp=4,max.boot=100) #> number of iterations= 54  #> number of iterations= 16  #> number of iterations= 69  #> number of iterations= 36  #> number of iterations= 12  #> number of iterations= 22  #> number of iterations= 42  #> number of iterations= 51  #> number of iterations= 7  #> number of iterations= 113  #> number of iterations= 3  #> number of iterations= 16  #> number of iterations= 23  #> number of iterations= 64  #> number of iterations= 18  #> number of iterations= 98  #> One of the variances is going to zero;  trying new starting values. #> One of the variances is going to zero;  trying new starting values. #> One of the variances is going to zero;  trying new starting values. #> number of iterations= 9  #> number of iterations= 5  #> number of iterations= 68  #> number of iterations= 21  #> number of iterations= 32  #> number of iterations= 82  #> number of iterations= 40  #> number of iterations= 108  #> number of iterations= 42  #> number of iterations= 15  #> number of iterations= 15  #> number of iterations= 8  #> number of iterations= 30  #> number of iterations= 11  #> number of iterations= 227  #> number of iterations= 9  #> number of iterations= 38  #> number of iterations= 13  #> number of iterations= 36  #> number of iterations= 25  #> number of iterations= 26  #> number of iterations= 32  #> number of iterations= 24  #> number of iterations= 223  #> number of iterations= 7  #> number of iterations= 8  #> number of iterations= 60  #> number of iterations= 36  #> number of iterations= 26  #> number of iterations= 31  #> number of iterations= 214  #> number of iterations= 28  #> number of iterations= 34  #> number of iterations= 54  #> number of iterations= 4  #> number of iterations= 12  #> number of iterations= 281  #> number of iterations= 286  #> number of iterations= 8  #> number of iterations= 12  #> number of iterations= 49  #> number of iterations= 52  #> number of iterations= 9  #> number of iterations= 169  #> number of iterations= 24  #> number of iterations= 33  #> number of iterations= 85  #> number of iterations= 5  #> number of iterations= 49  #> number of iterations= 143  #> number of iterations= 9  #> number of iterations= 34  #> number of iterations= 40  #> number of iterations= 26  #> number of iterations= 18  #> number of iterations= 5  #> number of iterations= 50  #> number of iterations= 33  #> number of iterations= 43  #> number of iterations= 11  #> number of iterations= 30  #> number of iterations= 48  #> number of iterations= 75  #> number of iterations= 14  #> number of iterations= 36  #> number of iterations= 11  #> number of iterations= 22  #> number of iterations= 39  #> number of iterations= 45  #> number of iterations= 30  #> number of iterations= 65  #> number of iterations= 31  #> number of iterations= 54  #> number of iterations= 98  #> number of iterations= 28  #> number of iterations= 263  #> number of iterations= 60  #> number of iterations= 34  #> number of iterations= 11  #> number of iterations= 11  #> number of iterations= 20  #> number of iterations= 4  #> number of iterations= 32  #> number of iterations= 54  #> number of iterations= 87   #> Decision: Select 1 Component(s)  #> [1] 1"},{"path":"/reference/polyfun.html","id":null,"dir":"Reference","previous_headings":"","what":"General-purpose log-likelihood function, vectorized sum(pars*x^i) — polyfun","title":"General-purpose log-likelihood function, vectorized sum(pars*x^i) — polyfun","text":"General-purpose log-likelihood function, vectorized sum(pars*x^)","code":""},{"path":"/reference/polyfun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General-purpose log-likelihood function, vectorized sum(pars*x^i) — polyfun","text":"","code":"polyfun(pars, x)"},{"path":"/reference/polyfun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"General-purpose log-likelihood function, vectorized sum(pars*x^i) — polyfun","text":"pars parameters x log mean count","code":""},{"path":"/reference/polyfun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"General-purpose log-likelihood function, vectorized sum(pars*x^i) — polyfun","text":"values representing output polynomial fuction (f(x))","code":""},{"path":"/reference/polyfun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"General-purpose log-likelihood function, vectorized sum(pars*x^i) — polyfun","text":"","code":"polyfun(pars = c(1, 2, 3), x = 1:5) #> [1]  6 17 34 57 86 polyfun(pars = c(1, 0, 3), x = 1) #> [1] 4"},{"path":"/reference/read_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract specified data from a list of datasets — read_data","title":"Extract specified data from a list of datasets — read_data","text":"function extracts specific component (data) list datasets. component extract specified extract_name parameter, function returns list containing extracted data dataset.","code":""},{"path":"/reference/read_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract specified data from a list of datasets — read_data","text":"","code":"read_data(dataset_list, extract_name)"},{"path":"/reference/read_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract specified data from a list of datasets — read_data","text":"dataset_list list datasets data extracted. element list assumed dataset (typically list dataframe). extract_name string representing name component column extracted dataset dataset_list. function looks name within dataset.","code":""},{"path":"/reference/read_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract specified data from a list of datasets — read_data","text":"list containing extracted data. element corresponds extracted component datasets dataset_list. names list elements taken names dataset_list.","code":""},{"path":"/reference/read_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract specified data from a list of datasets — read_data","text":"","code":"# Example dataset list dataset1 <- list(countdata = matrix(1:9, nrow = 3), metadata = data.frame(id = 1:3)) dataset2 <- list(countdata = matrix(10:18, nrow = 3), metadata = data.frame(id = 4:6)) dataset_list <- list(dataset1 = dataset1, dataset2 = dataset2)  # Extract 'countdata' from each dataset in the list result <- read_data(dataset_list, \"countdata\") print(result) #> $dataset1 #>      [,1] [,2] [,3] #> [1,]    1    4    7 #> [2,]    2    5    8 #> [3,]    3    6    9 #>  #> $dataset2 #>      [,1] [,2] [,3] #> [1,]   10   13   16 #> [2,]   11   14   17 #> [3,]   12   15   18 #>"},{"path":"/reference/rnormmix0.html","id":null,"dir":"Reference","previous_headings":"","what":"general-purpose normal-mixture deviate generator: takes matrices of probabilities, means, sds — rnormmix0","title":"general-purpose normal-mixture deviate generator: takes matrices of probabilities, means, sds — rnormmix0","text":"general-purpose normal-mixture deviate generator: takes matrices probabilities, means, sds","code":""},{"path":"/reference/rnormmix0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"general-purpose normal-mixture deviate generator: takes matrices of probabilities, means, sds — rnormmix0","text":"","code":"rnormmix0(n, probs, muvals, sdvals)"},{"path":"/reference/rnormmix0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"general-purpose normal-mixture deviate generator: takes matrices of probabilities, means, sds — rnormmix0","text":"n number observations probs mixture proportions muvals values mean sdvals values standard deviation","code":""},{"path":"/reference/rnormmix0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"general-purpose normal-mixture deviate generator: takes matrices of probabilities, means, sds — rnormmix0","text":"simulations","code":""},{"path":[]}]
